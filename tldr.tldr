{
	"tldrawFileFormatVersion": 1,
	"schema": {
		"schemaVersion": 2,
		"sequences": {
			"com.tldraw.store": 4,
			"com.tldraw.asset": 1,
			"com.tldraw.camera": 1,
			"com.tldraw.document": 2,
			"com.tldraw.instance": 25,
			"com.tldraw.instance_page_state": 5,
			"com.tldraw.page": 1,
			"com.tldraw.instance_presence": 5,
			"com.tldraw.pointer": 1,
			"com.tldraw.shape": 4,
			"com.tldraw.asset.bookmark": 2,
			"com.tldraw.asset.image": 5,
			"com.tldraw.asset.video": 5,
			"com.tldraw.shape.group": 0,
			"com.tldraw.shape.text": 2,
			"com.tldraw.shape.bookmark": 2,
			"com.tldraw.shape.draw": 2,
			"com.tldraw.shape.geo": 9,
			"com.tldraw.shape.note": 7,
			"com.tldraw.shape.line": 5,
			"com.tldraw.shape.frame": 0,
			"com.tldraw.shape.arrow": 5,
			"com.tldraw.shape.highlight": 1,
			"com.tldraw.shape.embed": 4,
			"com.tldraw.shape.image": 4,
			"com.tldraw.shape.video": 2,
			"com.tldraw.binding.arrow": 0
		}
	},
	"records": [
		{
			"gridSize": 10,
			"name": "",
			"meta": {},
			"id": "document:document",
			"typeName": "document"
		},
		{
			"meta": {},
			"id": "page:page",
			"name": "Page 1",
			"index": "a1",
			"typeName": "page"
		},
		{
			"x": 316.1376953125,
			"y": 169.41188049316406,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:TUjPoscteTUOrIyjhSCRs",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 391.7486877441406,
				"text": " ::      scope resolution operator",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a1",
			"typeName": "shape"
		},
		{
			"x": 316.1376953125,
			"y": 209.20408630371094,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:px--aBOwLofeXpy9lp4b2",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 603.4251098632812,
				"text": "Initialiser list : attr(sttr) in front of constructor",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a2",
			"typeName": "shape"
		},
		{
			"x": 315.71319580078125,
			"y": 125.78907203674316,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:z3gYRoTNLB0PUJKML8KEY",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 528.9556884765625,
				"text": "new replacement : new (addr) ClassNme()",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a3",
			"typeName": "shape"
		},
		{
			"x": 247.134335955803,
			"y": 481.72057008199215,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:8oTWWEeglO8H5Q8iIDIFs",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1438.5064697265625,
				"text": "when dealing with pointer in dynamic casting, if the base class is polymorphic, and we want to cast from the child\n to the base  the code will compile and it will return a null pointer in runtime otherwise it will not be compiled",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a410G",
			"typeName": "shape"
		},
		{
			"x": 221.49635833742371,
			"y": 300.4529359891237,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:oMSWknrDmL28xD4oRzD-0",
			"type": "text",
			"props": {
				"color": "orange",
				"size": "m",
				"w": 201.2083282470703,
				"text": "dynamic casting",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1.5318210667561925
			},
			"parentId": "page:page",
			"index": "a2V5Gi",
			"typeName": "shape"
		},
		{
			"x": 247.134335955803,
			"y": 580.7995544732858,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:R2g04-xsYIFRFTtpydGxl",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1289.6588134765625,
				"text": "when dealing with refrences in dynamic casting, if the base class is polymorphic, and we want to cast \nfromthe child to the base  the code will throw bad_cast exception",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a56ct",
			"typeName": "shape"
		},
		{
			"x": 586.9400942629252,
			"y": 300.4529359891237,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:MYqjFp5URrKE7O7l7cbZL",
			"type": "text",
			"props": {
				"color": "light-green",
				"size": "m",
				"w": 1231.052001953125,
				"text": "https://youtube.com/playlist?list=PL1w8k37X_6L-KS5DQt7U0rCtgIgdIadWz&si=nHa_hFW9rR3bXx31",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a6AMU",
			"typeName": "shape"
		},
		{
			"x": 199.60207400110647,
			"y": 901.0388392059131,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:vfHHVTtQriA8HaYXOObYt",
			"type": "text",
			"props": {
				"color": "orange",
				"size": "m",
				"w": 259.6875433149046,
				"text": "static casting",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1.5318210667561925
			},
			"parentId": "page:page",
			"index": "a2kb7I",
			"typeName": "shape"
		},
		{
			"x": 583.7467619987403,
			"y": 901.0388392059131,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:HuO5DqHgTGnYv17hE80jk",
			"type": "text",
			"props": {
				"color": "light-green",
				"size": "m",
				"w": 1307.6080322265625,
				"text": "https://www.youtube.com/watch?v=z3BMeizchSc&list=PL1w8k37X_6L-KS5DQt7U0rCtgIgdIadWz&index=3",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a74R0",
			"typeName": "shape"
		},
		{
			"x": 283.907742100302,
			"y": 997.8819288938805,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:nVMbuCfJAw-hOdMK33BsR",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1743.473876953125,
				"text": "whene we have private inheritance, and we want to use derived object in function that takes parent object as parametre we have an error",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a5mzU",
			"typeName": "shape"
		},
		{
			"x": 288.4715253379426,
			"y": 1058.4087976915891,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:CAeNKG1sn5tJcSNyH5mjz",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1488.473876953125,
				"text": "whene we have private inheritance, and we want to cast derived pointer object to base pointer object, we got an error",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a5yfzAVZ",
			"typeName": "shape"
		},
		{
			"x": 247.134335955803,
			"y": 398.83950172158234,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:YFxp1R3VTAhcEJrU_ySAq",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 443.3502502441406,
				"text": "RTTI : Run Time Type Identification",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a85SP",
			"typeName": "shape"
		},
		{
			"x": 242.09822644400873,
			"y": 690.7366288635512,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:MyN9Z_Eb--jQJxwCYhuBv",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1505.296875,
				"text": "when we use dynamic casting it will return the address object in memory or null in case of pointer, in case of references\nwill return either reference of the objct or wil throw bad cast exception.",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a5Ufo",
			"typeName": "shape"
		},
		{
			"x": 570.694016368885,
			"y": 1162.2733767428824,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:xUVvs_J4c-1bDNKgf0H4_",
			"type": "text",
			"props": {
				"color": "light-green",
				"size": "m",
				"w": 1313.180908203125,
				"text": "https://www.youtube.com/watch?v=BxWE146Isek&list=PL1w8k37X_6L-KS5DQt7U0rCtgIgdIadWz&index=5",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a7dVE",
			"typeName": "shape"
		},
		{
			"x": 270.8549964704466,
			"y": 1259.1164664308499,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:jJcFDcou6K-2__QaMhgif",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1046.8984375,
				"text": "when dealing with condt object, and we want to modify on it, we use <const_cast>",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a5spjdAS",
			"typeName": "shape"
		},
		{
			"x": 186.54932837125108,
			"y": 1162.2733767428824,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:kcwoIz_inXukmFNEpl3Vf",
			"type": "text",
			"props": {
				"color": "orange",
				"size": "m",
				"w": 253.5143764069795,
				"text": "const casting",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1.5318210667561925
			},
			"parentId": "page:page",
			"index": "a2sR70",
			"typeName": "shape"
		},
		{
			"x": 271.9926210895625,
			"y": 1307.0430199159764,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:t9AXZF7YTEW1RWYRocu49",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1344.90625,
				"text": "we cannot cast to another datatype usimg const cast (int* => char*) otherwise we have compile time error",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a5vkrYB2",
			"typeName": "shape"
		},
		{
			"x": 268.4201118038911,
			"y": 1485.1644740818329,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:-D6Suszh1BvdhiT7fiLlO",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1341.9765625,
				"text": "reinterpret cast allowing us to convert from a type to another regardless it is a primitive type or not, but...",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a5xDQVss",
			"typeName": "shape"
		},
		{
			"x": 188.51191794853827,
			"y": 1385.6004407736052,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:itqTph4Dl-4Hrzle1nQis",
			"type": "text",
			"props": {
				"color": "orange",
				"size": "m",
				"w": 364.6113027116617,
				"text": "reinterpret casting",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1.5318210667561925
			},
			"parentId": "page:page",
			"index": "a2wH1V",
			"typeName": "shape"
		},
		{
			"x": 263.377266356852,
			"y": 1533.0577221093604,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:AD6NUUfsmuJdtMouv-YnR",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1091.012939453125,
				"text": "it is not safe, in forward casting, but we can move backward cast to the original object",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a5xwhzPd",
			"typeName": "shape"
		},
		{
			"x": 261.60097528489916,
			"y": 1587.9365092043338,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:eRTpBAr681EEzhw_UuGbp",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1053.5,
				"text": "we cannot cast from const object to none const object, it will gives compilation error",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a5yJLefE",
			"typeName": "shape"
		},
		{
			"id": "pointer:pointer",
			"typeName": "pointer",
			"x": -2265.8035882588124,
			"y": 961.1199276953637,
			"lastActivityTimestamp": 1723728011623,
			"meta": {}
		},
		{
			"followingUserId": null,
			"opacityForNextShape": 1,
			"stylesForNextShape": {
				"tldraw:color": "black",
				"tldraw:geo": "rectangle"
			},
			"brush": null,
			"scribbles": [],
			"cursor": {
				"type": "move",
				"rotation": 0
			},
			"isFocusMode": false,
			"exportBackground": true,
			"isDebugMode": false,
			"isToolLocked": false,
			"screenBounds": {
				"x": 0,
				"y": 0,
				"w": 1599.1666259765625,
				"h": 1000
			},
			"insets": [
				false,
				false,
				true,
				false
			],
			"zoomBrush": null,
			"isGridMode": false,
			"isPenMode": false,
			"chatMessage": "",
			"isChatting": false,
			"highlightedUserIds": [],
			"isFocused": true,
			"devicePixelRatio": 2.4000000953674316,
			"isCoarsePointer": false,
			"isHoveringCanvas": true,
			"openMenus": [],
			"isChangingStyle": false,
			"isReadonly": false,
			"meta": {},
			"duplicateProps": null,
			"id": "instance:instance",
			"currentPageId": "page:page",
			"typeName": "instance"
		},
		{
			"editingShapeId": null,
			"croppingShapeId": null,
			"selectedShapeIds": [
				"shape:fmqPm1RnI_ib-hyLiLwUA",
				"shape:0uFbKndaWIGh7TPKcsAbV",
				"shape:ezEOVi7KQYOTCwbYazUWT",
				"shape:ruFG8dtGNB6TJiWKe0Cue",
				"shape:dsLLDI2P0yo8ooJb4k2qP",
				"shape:nnR5IupxHJY4oaaWrR0qz",
				"shape:0-ebdXqvO1S7rVr-4Pjc2",
				"shape:cJ9wmgvt7XsH4pq5GEDoH"
			],
			"hoveredShapeId": null,
			"erasingShapeIds": [],
			"hintingShapeIds": [],
			"focusedGroupId": null,
			"meta": {},
			"id": "instance_page_state:page:page",
			"pageId": "page:page",
			"typeName": "instance_page_state"
		},
		{
			"x": 3362.0535882588124,
			"y": 327.4086367577613,
			"z": 0.5,
			"meta": {},
			"id": "camera:page:page",
			"typeName": "camera"
		},
		{
			"x": 133.7852857757166,
			"y": 39.99191319591904,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:4L_1mlKHHbzemzog6RGoA",
			"type": "text",
			"props": {
				"color": "red",
				"size": "m",
				"w": 93.57160949707031,
				"text": "Casting",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 2.482816029670152
			},
			"parentId": "shape:dcOGp7LULymkhC8fPv_3j",
			"index": "a1",
			"typeName": "shape"
		},
		{
			"x": 0,
			"y": 0,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:bJtvODyDv_p-bNjZe1s2r",
			"type": "geo",
			"props": {
				"w": 499.89166353279495,
				"h": 160.41671752929688,
				"geo": "rectangle",
				"color": "blue",
				"labelColor": "black",
				"fill": "none",
				"dash": "draw",
				"size": "m",
				"font": "draw",
				"text": "",
				"align": "middle",
				"verticalAlign": "middle",
				"growY": 0,
				"url": "",
				"scale": 1
			},
			"parentId": "shape:dcOGp7LULymkhC8fPv_3j",
			"index": "a2CGI",
			"typeName": "shape"
		},
		{
			"x": 0,
			"y": 0,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:wbXvvsFgaLBrzDaK9RMbQ",
			"type": "geo",
			"props": {
				"w": 499.89166353279495,
				"h": 160.41671752929688,
				"geo": "rectangle",
				"color": "blue",
				"labelColor": "black",
				"fill": "none",
				"dash": "draw",
				"size": "m",
				"font": "draw",
				"text": "",
				"align": "middle",
				"verticalAlign": "middle",
				"growY": 0,
				"url": "",
				"scale": 1
			},
			"parentId": "shape:7YtJtOGhfARVB74rVdJhC",
			"index": "a28TV",
			"typeName": "shape"
		},
		{
			"x": 197.98935180737226,
			"y": 39.99191319591904,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:_E3Ia5dSAB3UQsxgkodOL",
			"type": "text",
			"props": {
				"color": "red",
				"size": "m",
				"w": 103.91295991805033,
				"text": "STL",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 2.482816029670152
			},
			"parentId": "shape:7YtJtOGhfARVB74rVdJhC",
			"index": "a1",
			"typeName": "shape"
		},
		{
			"x": -2092.5483367813313,
			"y": -164.1634741493317,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:7YtJtOGhfARVB74rVdJhC",
			"type": "group",
			"parentId": "page:page",
			"index": "aB7Jn",
			"props": {},
			"typeName": "shape"
		},
		{
			"x": 685.5574629256998,
			"y": -164.1634741493317,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:dcOGp7LULymkhC8fPv_3j",
			"type": "group",
			"parentId": "page:page",
			"index": "aA7Ik",
			"props": {},
			"typeName": "shape"
		},
		{
			"x": -2329.3375497605357,
			"y": 93.57529284902125,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:wJKVZYWvF5IoN9KMhOiUG",
			"type": "text",
			"props": {
				"color": "orange",
				"size": "m",
				"w": 41.85286331176758,
				"text": "STL",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1.2173111241084495
			},
			"parentId": "page:page",
			"index": "aC6SG",
			"typeName": "shape"
		},
		{
			"x": -2224.181360795692,
			"y": 100.61526753079252,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:jq8NllUfPi7i-BEBXslNa",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 585.765625,
				"text": "Some of the key components of the STL include",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "aD0Fr",
			"typeName": "shape"
		},
		{
			"x": -2253.732142045692,
			"y": 100.61526753079252,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:no-3r7MhRDFI996OdkePn",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 16,
				"text": ":",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "aEAXR",
			"typeName": "shape"
		},
		{
			"x": -2355.763392045692,
			"y": 54.47373034902125,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:8IFesj0RUqHTTadHbtrXL",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 750.3814697265625,
				"text": "-Containers : Set, Map, Vector, List, Stack, queue, dequeue, ...",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "aF4Qw",
			"typeName": "shape"
		},
		{
			"x": -2351.388392045692,
			"y": 145.9515745873025,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:LSq0OV9u_qtuDQFEOnv5c",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 576.44921875,
				"text": "-Algorithms : sort, find, and binary_search, ....",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "aG9Qj",
			"typeName": "shape"
		},
		{
			"x": -2351.388392045692,
			"y": 210.7562620873025,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:yCmfWBESSA74eiDRCsp2f",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1025.51171875,
				"text": "-Iterators : forward_iterator, bidirectional_iterator, and random_access_iterator",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "aHBAc",
			"typeName": "shape"
		},
		{
			"x": -2351.388392045692,
			"y": 275.4242308373025,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:cYnxJ4ofWUXm4R9TraZlB",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1355.348876953125,
				"text": "-Function Objects : called also functors, which are functions used to be passed as an argument to algorithms",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "aI0lf",
			"typeName": "shape"
		},
		{
			"x": -2351.388392045692,
			"y": 327.50754382558375,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:WHQ2l4eMyClUdd64YFU5F",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1350.212158203125,
				"text": "-Adapters :Adapters are components that modify the behavior of other components in the STL. For example,\nthe reverse_iterator adapter can be used to reverse the order of elements in a container",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "aJ2pp",
			"typeName": "shape"
		},
		{
			"x": -2314.174830033973,
			"y": 468.88120105214625,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:fmqPm1RnI_ib-hyLiLwUA",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 435.32940673828125,
				"text": "list\ndeque\narrays\nforward_list( Introduced in C++11)",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "aKAJs",
			"typeName": "shape"
		},
		{
			"x": -2351.2776742722544,
			"y": 409.23276355214625,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:0uFbKndaWIGh7TPKcsAbV",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1204.0728759765625,
				"text": "● Sequence Containers: implement data structures that can be accessed in a sequential manner.",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "aJnhV",
			"typeName": "shape"
		},
		{
			"x": -2351.2776742722544,
			"y": 622.0127928490213,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:ezEOVi7KQYOTCwbYazUWT",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 970.84375,
				"text": "● Container Adaptors: provide a different interface for sequential containers.",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "aJz0g2nh",
			"typeName": "shape"
		},
		{
			"x": -2314.174830033973,
			"y": 686.8239500755838,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:ruFG8dtGNB6TJiWKe0Cue",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 181.6770782470703,
				"text": "queue\npriority_queue\nstack",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "aL48M",
			"typeName": "shape"
		},
		{
			"x": -2314.174830033973,
			"y": 879.0245115990213,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:dsLLDI2P0yo8ooJb4k2qP",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 115.19270324707031,
				"text": "set\nmultiset\nmap\nmultimap",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "aMB1w",
			"typeName": "shape"
		},
		{
			"x": -2351.2776742722544,
			"y": 814.2133543724588,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:nnR5IupxHJY4oaaWrR0qz",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1381.078125,
				"text": "● Associative Containers: implement sorted data structures that can be quickly searched (O(log n) complexity).",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "aK4fH4s0",
			"typeName": "shape"
		},
		{
			"x": -2314.174830033973,
			"y": 1092.5987303490213,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:0-ebdXqvO1S7rVr-4Pjc2",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 538.36328125,
				"text": "unordered_set (Introduced in C++11)\nunordered_multiset (Introduced in C++11)\nunordered_map (Introduced in C++11)\nunordered_multimap (Introduced in C++11)",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "aN3b2",
			"typeName": "shape"
		},
		{
			"x": -2351.2776742722544,
			"y": 1027.7875731224588,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:cJ9wmgvt7XsH4pq5GEDoH",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1297.69921875,
				"text": "● Unordered Associative Containers: implement unordered data structures that can be quickly searched",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "aK7UZgcs",
			"typeName": "shape"
		}
	]
}